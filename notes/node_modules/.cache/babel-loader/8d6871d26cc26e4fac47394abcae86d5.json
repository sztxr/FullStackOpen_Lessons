{"ast":null,"code":"import _defineProperty from \"/home/spiderlily/Code/FullStackOpen/lessons/notes/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/spiderlily/Code/FullStackOpen/lessons/notes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/spiderlily/Code/FullStackOpen/lessons/notes/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\n\nconst App = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newNote = _useState4[0],\n        setNewNote = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        showAll = _useState6[0],\n        setShowAll = _useState6[1];\n\n  const hook = () => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  };\n\n  useEffect(hook, []);\n  const notesToShow = showAll ? notes : notes.filter(note => note.important); // note.important === true\n\n  const rows = () => notesToShow.map(note => React.createElement(Note, {\n    key: note.id,\n    note: note,\n    toggleImportance: () => toggleImportance(note.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }));\n\n  const handleNoteChange = e => {\n    // console.log(e.target.value)\n    setNewNote(e.target.value);\n  };\n\n  const addNote = e => {\n    e.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    };\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes([...notes, returnedNote]);\n      setNewNote('');\n    });\n  };\n\n  const toggleImportance = id => {\n    // console.log(`importance of ${id} needs to be toggled`)\n    // array find method to find the note we want to modify, and assing it to the `note` variable\n    const note = notes.find(n => n.id === id); // then we create a new object that is the exact copy of the note we saved,\n    // apart from the important property, which we toggle to be the opposite of its previous value\n\n    const changedNote = _objectSpread({}, note, {\n      important: !note.important\n    }); // shallow copy\n    // The callback function sets the component's notes state to a new array that\n    // contains all the items from the previous notes array, except for the old note\n    // which is replaced by the updated version of it returned by the server:\n\n\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote.data));\n    }); // if note.id !== id is true, we simply copy the item from the old array into the new array\n    // if the condition is false, then the note object returned by the server is added to the array instead.\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"show \", showAll ? 'important' : 'all')), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, rows()), React.createElement(\"form\", {\n    onSubmit: addNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/spiderlily/Code/FullStackOpen/lessons/notes/src/App.js"],"names":["React","useState","useEffect","Note","noteService","App","props","notes","setNotes","newNote","setNewNote","showAll","setShowAll","hook","getAll","then","initialNotes","notesToShow","filter","note","important","rows","map","id","toggleImportance","handleNoteChange","e","target","value","addNote","preventDefault","noteObject","content","date","Date","toISOString","Math","random","create","returnedNote","find","n","changedNote","update","data"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  const hook = () => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n  useEffect(hook, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important) // note.important === true\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportance(note.id)}\n    />\n  )\n\n  const handleNoteChange = (e) => {\n    // console.log(e.target.value)\n    setNewNote(e.target.value)\n  }\n\n  const addNote = (e) => {\n    e.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n    \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes([...notes, returnedNote])\n        setNewNote('')\n      })\n  }\n\n  const toggleImportance = id => {\n    // console.log(`importance of ${id} needs to be toggled`)\n\n    // array find method to find the note we want to modify, and assing it to the `note` variable\n    const note = notes.find(n => n.id === id)\n    // then we create a new object that is the exact copy of the note we saved,\n    // apart from the important property, which we toggle to be the opposite of its previous value\n    const changedNote = { ...note, important: !note.important } // shallow copy\n\n    // The callback function sets the component's notes state to a new array that\n    // contains all the items from the previous notes array, except for the old note\n    // which is replaced by the updated version of it returned by the server:\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote.data))\n      })\n    // if note.id !== id is true, we simply copy the item from the old array into the new array\n    // if the condition is false, then the note object returned by the server is added to the array instead.\n  }\n\n  \n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type='submit'>Save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}