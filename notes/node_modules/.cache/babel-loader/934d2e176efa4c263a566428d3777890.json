{"ast":null,"code":"import _defineProperty from \"/home/spiderlily/Code/FullStackOpen/lessons/notes/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/spiderlily/Code/FullStackOpen/lessons/notes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/spiderlily/Code/FullStackOpen/lessons/notes/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport noteService from './services/notes';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\n\nconst App = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newNote = _useState4[0],\n        setNewNote = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        showAll = _useState6[0],\n        setShowAll = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        errorMessage = _useState8[0],\n        setErrorMessage = _useState8[1];\n\n  const hook = () => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  };\n\n  useEffect(hook, []);\n  const notesToShow = showAll ? notes : notes.filter(note => note.important); // note.important === true\n\n  const rows = () => notesToShow.map(note => React.createElement(Note, {\n    key: note.id,\n    note: note,\n    toggleImportance: () => toggleImportanceOf(note.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }));\n\n  const handleNoteChange = e => {\n    // console.log(e.target.value)\n    setNewNote(e.target.value);\n  };\n\n  const addNote = e => {\n    e.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    };\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes([...notes, returnedNote]);\n      setNewNote('');\n    });\n  };\n\n  const toggleImportanceOf = id => {\n    // array find method to find the note we want to modify, and assing it to the `note` variable\n    const note = notes.find(n => n.id === id); // then we create a new object that is the exact copy of the note we saved,\n    // apart from the important property, which we toggle to be the opposite of its previous value\n\n    const changedNote = _objectSpread({}, note, {\n      important: !note.important\n    }); // shallow copy\n    // The callback function sets the component's notes state to a new array that\n    // contains all the items from the previous notes array, except for the old note\n    // which is replaced by the updated version of it returned by the server:\n\n\n    noteService.update(id, changedNote).then(returnedNote => {\n      // if note.id !== id is true, we simply copy the item from the old array into the new array\n      // if the condition is false, then the note object returned by the server is added to the array instead.\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    }).catch(err => {\n      setErrorMessage(\"Note '\".concat(note.content, \"}' was already deleted from server\"));\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000); //return an array with only the items from the list for which n.id !== id return true for\n\n      setNotes(notes.filter(n => n.id !== id));\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(Notification, {\n    message: errorMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: () => setShowAll(!showAll),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"show \", showAll ? 'important' : 'all')), React.createElement(\"ul\", {\n    className: \"note-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, rows()), React.createElement(\"form\", {\n    onSubmit: addNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Add\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/spiderlily/Code/FullStackOpen/lessons/notes/src/App.js"],"names":["React","useState","useEffect","noteService","Note","Notification","App","props","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","hook","getAll","then","initialNotes","notesToShow","filter","note","important","rows","map","id","toggleImportanceOf","handleNoteChange","e","target","value","addNote","preventDefault","noteObject","content","date","Date","toISOString","Math","random","create","returnedNote","find","n","changedNote","update","catch","err","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const hook = () => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n  useEffect(hook, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important) // note.important === true\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  const handleNoteChange = (e) => {\n    // console.log(e.target.value)\n    setNewNote(e.target.value)\n  }\n\n  const addNote = (e) => {\n    e.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes([...notes, returnedNote])\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = id => {\n    // array find method to find the note we want to modify, and assing it to the `note` variable\n    const note = notes.find(n => n.id === id)\n    // then we create a new object that is the exact copy of the note we saved,\n    // apart from the important property, which we toggle to be the opposite of its previous value\n    const changedNote = { ...note, important: !note.important } // shallow copy\n\n    // The callback function sets the component's notes state to a new array that\n    // contains all the items from the previous notes array, except for the old note\n    // which is replaced by the updated version of it returned by the server:\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        // if note.id !== id is true, we simply copy the item from the old array into the new array\n        // if the condition is false, then the note object returned by the server is added to the array instead.\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(err => {\n        setErrorMessage(`Note '${note.content}}' was already deleted from server`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        //return an array with only the items from the list for which n.id !== id return true for\n        setNotes(notes.filter(n => n.id !== id))\n      })\n\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      <div>\n        <button className='btn btn-primary' onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n\n      <ul className='note-container'>\n        {rows()}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button className='btn btn-primary' type='submit'>Add</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}