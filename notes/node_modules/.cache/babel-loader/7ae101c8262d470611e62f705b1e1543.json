{"ast":null,"code":"import _slicedToArray from \"/home/spiderlily/Code/FullStackOpen/lessons/notes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/spiderlily/Code/FullStackOpen/lessons/notes/src/App.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Note from './components/Note';\n\nconst App = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newNote = _useState4[0],\n        setNewNote = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        showAll = _useState6[0],\n        setShowAll = _useState6[1];\n\n  useEffect(() => {\n    console.log('effect');\n    axios.get('http://localhost:3001/notes').then(response => {\n      console.log('promise fulfilled');\n      setNotes(response.data);\n    });\n  });\n  const notesToShow = showAll ? notes : notes.filter(note => note.important); // note.important === true\n\n  const rows = () => notesToShow.map(note => React.createElement(Note, {\n    key: note.id,\n    note: note,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n\n  const addNote = e => {\n    e.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    }; // setNotes(notes.concat(noteObject))\n\n    setNotes([...notes, noteObject]);\n    setNewNote('');\n  };\n\n  const handleNoteChange = e => {\n    // console.log(e.target.value)\n    setNewNote(e.target.value);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"show \", showAll ? 'important' : 'all')), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, rows()), React.createElement(\"form\", {\n    onSubmit: addNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/spiderlily/Code/FullStackOpen/lessons/notes/src/App.js"],"names":["React","useState","axios","Note","App","props","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","console","log","get","then","response","data","notesToShow","filter","note","important","rows","map","id","addNote","e","preventDefault","noteObject","content","date","Date","toISOString","Math","random","length","handleNoteChange","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AAAA,oBACKJ,QAAQ,CAAC,EAAD,CADb;AAAA;AAAA,QACdK,KADc;AAAA,QACPC,QADO;;AAAA,qBAESN,QAAQ,CAAC,EAAD,CAFjB;AAAA;AAAA,QAEdO,OAFc;AAAA,QAELC,UAFK;;AAAA,qBAGSR,QAAQ,CAAC,IAAD,CAHjB;AAAA;AAAA,QAGdS,OAHc;AAAA,QAGLC,UAHK;;AAKrBC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAZ,IAAAA,KAAK,CACFa,GADH,CACO,6BADP,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAP,MAAAA,QAAQ,CAACU,QAAQ,CAACC,IAAV,CAAR;AACD,KALH;AAMD,GARQ,CAAT;AAUA,QAAMC,WAAW,GAAGT,OAAO,GACvBJ,KADuB,GAEvBA,KAAK,CAACc,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,SAA1B,CAFJ,CAfqB,CAiBoB;;AAEzC,QAAMC,IAAI,GAAG,MAAMJ,WAAW,CAACK,GAAZ,CAAgBH,IAAI,IACrC,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACI,EADZ;AAEE,IAAA,IAAI,EAAEJ,IAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADiB,CAAnB;;AAOA,QAAMK,OAAO,GAAIC,CAAD,IAAO;AACrBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,UAAU,GAAG;AACjBC,MAAAA,OAAO,EAAEtB,OADQ;AAEjBuB,MAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAFW;AAGjBX,MAAAA,SAAS,EAAEY,IAAI,CAACC,MAAL,KAAgB,GAHV;AAIjBV,MAAAA,EAAE,EAAEnB,KAAK,CAAC8B,MAAN,GAAe;AAJF,KAAnB,CAFqB,CAQrB;;AACA7B,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWuB,UAAX,CAAD,CAAR;AACApB,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAXD;;AAaA,QAAM4B,gBAAgB,GAAIV,CAAD,IAAO;AAC9B;AACAlB,IAAAA,UAAU,CAACkB,CAAC,CAACW,MAAF,CAASC,KAAV,CAAV;AACD,GAHD;;AAKA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAE,MAAM5B,UAAU,CAAC,CAACD,OAAF,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACQA,OAAO,GAAG,WAAH,GAAiB,KADhC,CADF,CAFF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGa,IAAI,EADP,CAPF,EAUE;AAAM,IAAA,QAAQ,EAAEG,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,KAAK,EAAElB,OADT;AAEE,IAAA,QAAQ,EAAE6B,gBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,CAVF,CADF;AAoBD,CAhED;;AAkEA,eAAejC,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    console.log('effect')\n    axios\n      .get('http://localhost:3001/notes')\n      .then(response => {\n        console.log('promise fulfilled')\n        setNotes(response.data)\n      })\n  })\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important) // note.important === true\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n    />\n  )\n\n  const addNote = (e) => {\n    e.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n    // setNotes(notes.concat(noteObject))\n    setNotes([...notes, noteObject])\n    setNewNote('')\n  }\n\n  const handleNoteChange = (e) => {\n    // console.log(e.target.value)\n    setNewNote(e.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type='submit'>Save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}